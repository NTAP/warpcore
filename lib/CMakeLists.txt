string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UC)
configure_file(version.h.in version.h)
configure_file(version.c.in version.c)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)

include(FindPackageHandleStandardArgs)
find_path(NETMAP_INCLUDE netmap_user.h PATH_SUFFIXES net)
find_package_handle_standard_args(netmap DEFAULT_MSG NETMAP_INCLUDE)

set(SOURCES ${SOURCES} util.c ${CMAKE_CURRENT_BINARY_DIR}/version.c)
if (${netmap_FOUND})
  set(SOURCES ${SOURCES} arp.c eth.c icmp.c in_cksum.c ip.c udp.c warpcore.c)
else()
endif()

string(TOLOWER ${CMAKE_SYSTEM_NAME} CMAKE_SYSTEM_NAME_LC)
set(PLAT ${CMAKE_CURRENT_SOURCE_DIR}/plat_${CMAKE_SYSTEM_NAME_LC}.c)
if(EXISTS ${PLAT})
  set(SOURCES ${SOURCES} ${PLAT})
else()
  set(SOURCES ${SOURCES} plat_generic.c)
endif()

add_library(warpcore ${SOURCES})
set_property(TARGET warpcore PROPERTY INTERPROCEDURAL_OPTIMIZATION True)

target_include_directories(warpcore PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
find_package (Threads)
target_link_libraries(warpcore ${CMAKE_THREAD_LIBS_INIT})
